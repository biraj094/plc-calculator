Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     expr -> NUMBER
Rule 3     expr -> expr MINUS expr  [precedence=left, level=1]
Rule 4     expr -> expr + expr  [precedence=left, level=1]

Unused terminals:

    ASSIGN
    NAME
    RPAREN
    TIMES
    LPAREN
    DIVIDE

Terminals, with rules where they appear:

+                    : 4
ASSIGN               : 
DIVIDE               : 
LPAREN               : 
MINUS                : 3
NAME                 : 
NUMBER               : 2
RPAREN               : 
TIMES                : 
error                : 

Nonterminals, with rules where they appear:

expr                 : 1 3 3 4 4
statement            : 0


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) expr -> . NUMBER
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr + expr
    NUMBER          shift and go to state 3

    statement                      shift and go to state 1
    expr                           shift and go to state 2

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    MINUS           shift and go to state 4
    +               shift and go to state 5


state 3

    (2) expr -> NUMBER .
    MINUS           reduce using rule 2 (expr -> NUMBER .)
    +               reduce using rule 2 (expr -> NUMBER .)
    $end            reduce using rule 2 (expr -> NUMBER .)


state 4

    (3) expr -> expr MINUS . expr
    (2) expr -> . NUMBER
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr + expr
    NUMBER          shift and go to state 3

    expr                           shift and go to state 6

state 5

    (4) expr -> expr + . expr
    (2) expr -> . NUMBER
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr + expr
    NUMBER          shift and go to state 3

    expr                           shift and go to state 7

state 6

    (3) expr -> expr MINUS expr .
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . + expr
    MINUS           reduce using rule 3 (expr -> expr MINUS expr .)
    +               reduce using rule 3 (expr -> expr MINUS expr .)
    $end            reduce using rule 3 (expr -> expr MINUS expr .)


state 7

    (4) expr -> expr + expr .
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . + expr
    MINUS           reduce using rule 4 (expr -> expr + expr .)
    +               reduce using rule 4 (expr -> expr + expr .)
    $end            reduce using rule 4 (expr -> expr + expr .)
